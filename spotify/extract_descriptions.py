#!/usr/bin/env python3
"""
Script para extrair e formatar descri√ß√µes dos epis√≥dios do JSON
"""

import json
import re

def format_description(description):
    """Formata uma descri√ß√£o convertendo \n para quebras de linha e organizando markdown"""
    
    # Remove \n e quebra em linhas
    lines = description.replace('\\n', '\n').split('\n')
    
    # Remove linhas vazias do in√≠cio e fim
    while lines and not lines[0].strip():
        lines.pop(0)
    while lines and not lines[-1].strip():
        lines.pop()
    
    formatted_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            formatted_lines.append("")
            continue
            
        # Se √© um t√≠tulo com emoji - mant√©m o emoji
        if line.startswith('üéØ'):
            if formatted_lines and formatted_lines[-1]:
                formatted_lines.append("")
            # Remove ** e mant√©m o emoji
            clean_title = line.replace('**', '').strip()
            formatted_lines.append(f"# {clean_title}")
            formatted_lines.append("")
            
        elif line.startswith('üîç'):
            if formatted_lines and formatted_lines[-1]:
                formatted_lines.append("")
            clean_title = line.replace('**', '').strip()
            formatted_lines.append(f"## {clean_title}")
            formatted_lines.append("")
            
        elif line.startswith('üíª') or line.startswith('üìö') or line.startswith('‚öñÔ∏è') or line.startswith('üìñ') or line.startswith('üë§'):
            if formatted_lines and formatted_lines[-1]:
                formatted_lines.append("")
            clean_title = line.replace('**', '').strip()
            formatted_lines.append(f"## {clean_title}")
            formatted_lines.append("")
            
        # Se √© uma lista com bullet
        elif line.startswith('‚Ä¢'):
            # Adiciona quebra antes da primeira lista se necess√°rio
            if formatted_lines and not formatted_lines[-1].startswith('-'):
                formatted_lines.append("")
            formatted_lines.append("- " + line[1:].strip())
            
        # Se √© texto normal
        else:
            formatted_lines.append(line)
    
    # Processa links
    final_lines = []
    for line in formatted_lines:
        # Converte URLs em links markdown mais inteligentes
        if 'https://drive.google.com' in line and 'Google Drive' not in line:
            line = re.sub(r'https://drive\.google\.com/[^\s]+', '[Google Drive](https://drive.google.com/drive/u/0/folders/1Y3U3IrYCiJ3E45Z8okR5eCg7OPnWQtPV)', line)
        elif 'linkedin.com' in line and 'LinkedIn' not in line:
            line = re.sub(r'https://www\.linkedin\.com/[^\s]+', '[LinkedIn](https://www.linkedin.com/in/searchguy/)', line)
        elif 'linkedin.com' in line and 'LinkedIn' in line:
            line = re.sub(r'Antonio Gulli - LinkedIn: https://www\.linkedin\.com/[^\s]+', '**Antonio Gulli** - [LinkedIn](https://www.linkedin.com/in/searchguy/)', line)
        final_lines.append(line)
    
    return '\n'.join(final_lines)

def main():
    # Carrega o JSON
    with open('spotify-complete-metadata.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Extrai descri√ß√µes dos epis√≥dios principais
    main_episodes = []
    special_episodes = []
    
    for episode in data['episodes']:
        episode_info = {
            'number': episode['episode_number'],
            'title': episode['title'],
            'type': episode['episode_type'],
            'description': episode['description']
        }
        
        if episode['episode_type'] == 'main':
            main_episodes.append(episode_info)
        else:
            special_episodes.append(episode_info)
    
    # Ordena epis√≥dios principais numericamente
    main_episodes.sort(key=lambda x: int(x['number']))
    
    # Gera markdown para epis√≥dios principais
    main_content = ["# Descri√ß√µes dos Epis√≥dios - Padr√µes de Design Ag√™nticos\n"]
    
    for episode in main_episodes:
        # Limpa o t√≠tulo removendo o prefixo [Epis√≥dio XX]
        clean_title = episode['title'].replace(f'[Epis√≥dio {episode["number"]}] ', '')
        main_content.append(f"## Epis√≥dio {episode['number']} - {clean_title}")
        main_content.append("")
        main_content.append(format_description(episode['description']))
        main_content.append("")
        main_content.append("---")
        main_content.append("")
    
    # Gera markdown para epis√≥dios especiais
    special_content = ["# Ap√™ndices - Padr√µes de Design Ag√™nticos\n"]
    
    for episode in special_episodes:
        # Limpa o t√≠tulo removendo o prefixo [Epis√≥dio X]
        clean_title = episode['title'].replace(f'[Epis√≥dio {episode["number"]}] ', '')
        special_content.append(f"## Ap√™ndice {episode['number']} - {clean_title}")
        special_content.append("")
        special_content.append(format_description(episode['description']))
        special_content.append("")
        special_content.append("---")
        special_content.append("")
    
    # Salva os arquivos
    with open('episodes-descriptions-formatted.md', 'w', encoding='utf-8') as f:
        f.write('\n'.join(main_content))
    
    with open('episodes-special-descriptions.md', 'w', encoding='utf-8') as f:
        f.write('\n'.join(special_content))
    
    print(f"‚úÖ Extra√≠das {len(main_episodes)} descri√ß√µes de epis√≥dios principais")
    print(f"‚úÖ Extra√≠das {len(special_episodes)} descri√ß√µes de epis√≥dios especiais")
    print("üìÅ Arquivos criados:")
    print("   - episodes-descriptions-formatted.md")
    print("   - episodes-special-descriptions.md")

if __name__ == "__main__":
    main()
